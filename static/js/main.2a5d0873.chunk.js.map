{"version":3,"sources":["components/box.jsx","App.js","reportWebVitals.js","index.js"],"names":["backgroundStyle","height","width","borderStyle","justifyContent","backgroundColor","borderRadius","playerStyle","color","ballStyle","display","Box","props","style","val","name","inner","flexDirection","outer","marginTop","marginLeft","Text","padding","score","fontSize","heigth","gridTemplate","App","resetGame","setState","ball","Math","round","ROW_SIZE","moveBoard","playerBoard","isUp","playerEdge","PLAYER_BOARD_SIZE","touchingEdge","delta","newDir","state","direction","map","x","pos","COL_SIZE","touchingBoard","player","indexOf","opponent","isOver","moveOpponent","movedPlayer","opponentDir","bounceBall","newState","playerScore","opponentScore","pause","keyInput","keyCode","board","Array","_","ballSpeed","opponentSpeed","InitialState","setInterval","this","document","onkeydown","title","key","k","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"wNAYMA,EAAkB,CACpBC,OAAQ,OACRC,MAAO,OACPC,YAAa,QACbC,eAAgB,SAChBC,gBAAkB,QAClBC,aAAc,OAEZC,EAAc,CAChBN,OAAQ,OACRC,MAAO,OACPC,YAAa,QACbC,eAAgB,SAChBC,gBAAkB,OAClBG,MAAO,SAGLC,EAAY,CACdR,OAAQ,OACRC,MAAO,OACPQ,QAAS,QACTL,gBAAiB,SACjBD,eAAgB,SAChBE,aAAc,OACdE,MAAM,SAgBKG,EAFH,SAACC,GAAD,OAAU,yBAAKC,MAAOb,GAAZ,KAA+B,yBAAKa,OAVxCC,EAUwDF,EAAMG,KA/C7D,IAsCXD,EACO,GAtCA,IAuCLA,EACKP,EAEAE,MANE,IAACK,GCrBZE,EAAQ,CACVN,QAAS,OACTO,cAAe,MACfb,eAAgB,WAGdc,EAAQ,CACVR,QAAS,OACTO,cAAe,SACfb,eAAgB,UAChBe,UAAW,MACXC,WAAY,OACZC,KAAM,QACNC,QAAS,QAIPC,EAAQ,CACVH,WAAY,QACZI,SAAU,OACVhB,MAAO,SAGLK,EAAQ,CACVX,MAAO,QACPuB,OAAQ,QACRf,QAAS,OACTgB,aAAa,UAAD,OAvCC,GAuCD,2BAtCC,GAsCD,WAyLDC,E,kDA/JX,WAAYf,GAAQ,IAAD,8BACf,cAAMA,IAIVgB,UAAY,kBAAM,EAAKC,SAAS,CAC7BC,KAAMC,KAAKC,MAAOC,KAvER,MAiEM,EASnBC,UAAY,SAACC,EAAaC,GACtB,IAAMC,EAAaD,EAAMD,EAAY,GAAIA,EAAYG,GAErD,IAAK,EAAKC,aAAaF,GAAa,CAChC,IAAMG,EA7ED,IA6EqBJ,GAAQ,EAAI,GAEhCK,EA/ED,KA+EW,EAAKC,MAAMC,UAAyBP,GAAS,EAAKM,MAAMC,UAAW,EAAKD,MAAMC,UAE9F,IAAK,EAAKJ,aAAa,EAAKG,MAAMZ,MAC9B,OAAQ,EAAKY,MAAMZ,MACf,KAAKO,EAAaG,EAAO,EACrB,EAAKX,SAAS,CACVc,UAAWF,EACXD,OAAQ,IAEZ,MACJ,KAAKH,EACD,EAAKR,SAAS,CACVc,UAAWF,IAEf,MACJ,KAAKJ,EAAaG,EAAQ,EACtB,EAAKX,SAAS,CACVc,UAAWF,EACXD,MAAO,IAKvB,OAAOL,EAAYS,KAAI,SAAAC,GAAC,OAAGA,EAAIL,KAEnC,OAAO,GAxCQ,EA6DnBD,aAAe,SAACO,GAAD,OAAU,GAAKA,GAAOA,EA7HxB,IA6H4CC,KAAyBD,GAAOA,EAAMC,KA7D5E,EA+DnBC,cAAgB,SAACF,GACb,OAA4C,IAApC,EAAKJ,MAAMO,OAAOC,QAAQJ,KACS,IAAtC,EAAKJ,MAAMS,SAASD,QAAQJ,KACkE,IAA/F,EAAKJ,OAA6B,IAAtB,EAAKA,MAAMF,MAAgB,SAAS,YAAYU,QAAQJ,EAAI,EAAKJ,MAAMF,QAlExE,EAqEnBY,OAAS,SAACN,GAAD,OAAgC,IAAtB,EAAKJ,MAAMF,OAAgBM,EArIjC,KAqIoD,GAA4B,IAArB,EAAKJ,MAAMF,QAAgBM,EAAI,GArI1F,KAqI4G,GArEtG,EAuEnBO,aAAe,WACX,IAAMC,EAAc,EAAKpB,UAAU,EAAKQ,MAAMS,SAAU,EAAKT,MAAMa,aACnED,EAAc,EAAKzB,SAAS,CAACsB,SAAUG,IACnC,EAAKzB,SAAS,CAAC0B,aAAc,EAAKb,MAAMa,eA1E7B,EA6EnBC,WAAa,WACT,IAAMC,EAAW,EAAKf,MAAMZ,KAAO,EAAKY,MAAMC,UAAU,EAAKD,MAAMF,MAC/D,EAAKD,aAAakB,IAClB,EAAK5B,SAAS,CAACc,WAAY,EAAKD,MAAMC,YAGtC,EAAKK,cAAcS,IACnB,EAAK5B,SAAS,CAACW,OAAQ,EAAKE,MAAMF,QAItC,EAAKX,SAAS,CAACC,KAAM2B,IAGjB,EAAKL,OAAOK,MACc,IAAtB,EAAKf,MAAMF,MAEX,EAAKX,SAAS,CACV6B,YAAa,EAAKhB,MAAMgB,YAAY,EACpC5B,KAAM2B,IAIV,EAAK5B,SAAS,CACV8B,cAAe,EAAKjB,MAAMiB,cAAc,EACxC7B,KAAM2B,IAGd,EAAK5B,SAAS,CAAC+B,OAAO,IACtB,EAAKhC,cA1GM,EA8GnBiC,SAAW,YAAgB,IAAdC,EAAa,EAAbA,QACT,GAAI,EAAKpB,MAAMkB,MAtKH,KAuKJE,GACA,EAAKjC,SAAS,CAAC+B,OAAO,SAK9B,OAAQE,GACR,KAhLY,GAiLZ,KAhLY,GAiLR,IAAMR,EAAc,EAAKpB,UAAU,EAAKQ,MAAMO,OAlLtC,KAkL8Ca,GAClDR,GACA,EAAKzB,SAAS,CAACoB,OAAQK,IAE3B,MACJ,KArLY,GAsLR,EAAKzB,SAAS,CAAC+B,OAAO,MA7H1B,EAAKlB,MAxBQ,WACjB,IAAMqB,EAAQ,YAAIC,MAxCI,IAwCsBpB,KAAI,SAACqB,EAAGnB,GAAJ,OAAYA,KAC5D,MAAO,CAEHG,OAAQc,EAAMnB,KAAI,SAAAC,GAAC,OA9CV,GA8CeA,EA1CP,KA2CjBM,SAAUY,EAAMnB,KAAI,SAAAC,GAAC,OA/CZ,IA+CkBA,EAAE,GAAJ,KACzBf,KAAMC,KAAKC,MAAOC,KAjDT,GAmDTiC,UAAW,IACXvB,WAnDS,GAoDTH,OAAQ,EACRoB,OAAO,EAEPO,cAAe,IACfZ,aAAa,EAEbG,YAAa,EACbC,cAAe,GAOFS,GAFE,E,qDA2CnB,WAAqB,IAAD,OAEhBC,aAAY,WACH,EAAK3B,MAAMkB,OACZ,EAAKJ,eAEVc,KAAK5B,MAAMwB,WAEdG,aAAY,WACH,EAAK3B,MAAMkB,OACb,EAAKP,iBAETiB,KAAK5B,MAAMyB,eAEdI,SAASC,UAAYF,KAAKT,SAC1BU,SAASE,MAAQ,c,oBA2ErB,WAAU,IAAD,OACCV,EAAQ,YAAIC,MAAM/B,MAAsBW,KAAI,SAACqB,EAAGnB,GAClD,IAAIhC,ED5MG,ECkNP,OALyC,IAApC,EAAK4B,MAAMO,OAAOC,QAAQJ,KAAuD,IAAtC,EAAKJ,MAAMS,SAASD,QAAQJ,GACxEhC,ED7MD,EC8MQ,EAAK4B,MAAMZ,OAASgB,IAC3BhC,ED9MH,GCgNM,kBAAC,EAAD,CAAK4D,IAAK5B,EAAK6B,EAAG7B,EAAK/B,KAAMD,OAGxC,OACA,yBAAKD,MAAOK,GACR,gCAAM,UAAN,IAAmBoD,KAAK5B,MAAMkB,MAAqB,aAAd,aAArC,KACA,yBAAK/C,MAAOG,GACR,yBAAKH,MAAOA,GAAQkD,GACpB,yBAAKlD,MAAOU,GAAQ+C,KAAK5B,MAAMgB,YAA/B,IAA6CY,KAAK5B,MAAMiB,gBAE5D,gCAAM,4BAAN,U,GAxJMiB,IAAMC,WC3DTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlB,SAASmB,eAAe,SAM1BZ,K","file":"static/js/main.2a5d0873.chunk.js","sourcesContent":["import React from 'react';\n\n/* Enum */\nconst BACKGROUND = 0;\nconst PLAYER = 1;\nconst BALL = 2;\nexport {\n    BACKGROUND,\n    PLAYER,\n    BALL,\n}\n/* style sheet */\nconst backgroundStyle = {\n    height: \"35px\",\n    width: \"35px\",\n    borderStyle: \"solid\",\n    justifyContent: \"center\",\n    backgroundColor : \"black\",\n    borderRadius: \"2px\",\n}\nconst playerStyle = {\n    height: \"35px\",\n    width: \"35px\",\n    borderStyle: \"solid\",\n    justifyContent: \"center\",\n    backgroundColor : \"blue\",\n    color: \"white\"\n}\n\nconst ballStyle = {\n    height: \"35px\",\n    width: \"35px\",\n    display: \"block\",\n    backgroundColor: \"yellow\",\n    justifyContent: \"center\",\n    borderRadius: \"100%\",\n    color:\"white\"\n}\n\n/* function to select style */\nconst getStyle = (val) => {\n    if (val === BACKGROUND) {\n        return {};\n    } if (val === PLAYER) {\n        return playerStyle;\n    } else {\n        return ballStyle;\n    }\n}\n\nconst Box = (props) =><div style={backgroundStyle}>  <div style={getStyle(props.name)} />\n</div>\nexport default Box;","import React from 'react';\nimport Box, { BACKGROUND, PLAYER, BALL } from './components/box.jsx';\n\n\n\n\n/* size */\nconst ROW_SIZE = 10\nconst COL_SIZE = 20\n\n/* BOARD */\nconst PLAYER_BOARD_SIZE = 3\nconst BOARD_EDGE_SPACE = 1;\n\n/* buttons */\nconst PLAYER_UP   = 38  // up arrow\nconst PLAYER_DOWN = 40  // down arrow\nconst PAUSE       = 32  // space\n \nconst inner = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"justify\", \n}\n\nconst outer = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"justify\", \n    marginTop: \"9em\",\n    marginLeft: \"25em\",\n    Text: \"100px\",\n    padding: \"10px\"\n}\n\n\nconst score = {\n    marginLeft: \"100px\",\n    fontSize: \"50px\",\n    color: \"white\"\n}\n\nconst style = {\n    width: \"250px\",\n    heigth: \"250px\",\n    display: \"grid\",\n    gridTemplate: `repeat(${ROW_SIZE}, 1fr) / repeat(${COL_SIZE}, 1fr)`\n}\n\n\nconst InitialState = () => {\n    const board = [...Array(PLAYER_BOARD_SIZE)].map((_, pos) => pos);\n    return {\n        /* board */\n        player: board.map(x => (x  * COL_SIZE) + BOARD_EDGE_SPACE),\n        opponent: board.map(x => ((x+1) * COL_SIZE)-(BOARD_EDGE_SPACE+1)),\n        ball: Math.round((ROW_SIZE * COL_SIZE)/2)+ ROW_SIZE,\n        /* ball */\n        ballSpeed: 100,\n        direction: -COL_SIZE,\n        delta: -1, // -1 means the ball is moving towards player 1 means towars opponent\n        pause: true,\n        /* for dumb Ai */\n        opponentSpeed: 150,\n        opponentDir: false,\n        /* Score */\n        playerScore: 0,\n        opponentScore: 0,\n    }\n}\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = InitialState();\n    }\n\n    resetGame = () => this.setState({\n       ball: Math.round((ROW_SIZE * COL_SIZE)/2)+ ROW_SIZE,\n    })\n\n    moveBoard = (playerBoard, isUp) => {\n        const playerEdge = isUp? playerBoard[0]: playerBoard[PLAYER_BOARD_SIZE-1];\n\n        if (!this.touchingEdge(playerEdge)) {\n            const delta = COL_SIZE * (isUp ? -1 : 1);\n            /* if ball touches the edge */\n            const newDir = (this.state.direction !== COL_SIZE ^ isUp) ? -this.state.direction: this.state.direction;\n            \n            if (!this.touchingEdge(this.state.ball)) {\n                switch (this.state.ball) {\n                    case playerEdge + delta -1:\n                        this.setState({\n                            direction: newDir,\n                            delta: -1,\n                        })\n                        break;\n                    case playerEdge:\n                        this.setState({\n                            direction: newDir,\n                        })\n                        break;\n                    case playerEdge + delta + 1:\n                        this.setState({\n                            direction: newDir,\n                            delta: 1,\n                        })\n                        break;\n                }\n            }\n            return playerBoard.map(x=> x + delta);\n        }      \n        return false\n    }\n    \n    componentDidMount() {\n        /* moving the ball */\n        setInterval(() => {\n            if (!this.state.pause){\n                this.bounceBall();\n            }\n        }, this.state.ballSpeed);\n        /* moving the opponent */\n        setInterval(() => {\n            if (!this.state.pause){\n               this.moveOpponent();\n            }\n        }, this.state.opponentSpeed);\n        \n        document.onkeydown = this.keyInput;\n        document.title = \"ping-pong\"\n    }\n    \n    touchingEdge = (pos) => (0 <= pos && pos < COL_SIZE) || (COL_SIZE*(ROW_SIZE-1) <= pos && pos < COL_SIZE * ROW_SIZE) \n\n    touchingBoard = (pos) => {\n        return (this.state.player.indexOf(pos) !== -1) || \n            (this.state.opponent.indexOf(pos) !== -1) ||\n            this.state[(this.state.delta === -1) ? \"player\":\"opponent\"].indexOf(pos+this.state.delta) !== -1;\n    }\n\n    isOver = (pos) => (this.state.delta === -1 && pos % COL_SIZE === 0) || (this.state.delta === 1 && (pos+1) % COL_SIZE === 0)\n\n    moveOpponent = () => {\n        const movedPlayer = this.moveBoard(this.state.opponent, this.state.opponentDir); \n        movedPlayer ? this.setState({opponent: movedPlayer}): \n            this.setState({opponentDir: !this.state.opponentDir});\n    }\n\n    bounceBall = () => {\n        const newState = this.state.ball + this.state.direction+this.state.delta;\n        if (this.touchingEdge(newState)) {\n            this.setState({direction: -this.state.direction})\n        } \n\n        if (this.touchingBoard(newState)) {\n            this.setState({delta: -this.state.delta}) \n        } \n        \n        /* updating board */\n        this.setState({ball: newState})\n\n        /* checking if loss or won */\n        if (this.isOver(newState)) {\n            if (this.state.delta !== -1) {\n                /* player won */ \n                this.setState({\n                    playerScore: this.state.playerScore+1,\n                    ball: newState,\n                })\n            } else {\n                /* opponent won */ \n                this.setState({\n                    opponentScore: this.state.opponentScore+1,\n                    ball: newState,\n                })\n            }\n            this.setState({pause: true})\n            this.resetGame();\n        }\n    } \n\n    keyInput = ({keyCode}) => {\n        if (this.state.pause) {\n            if (keyCode === PAUSE) {\n                this.setState({pause: false});\n            } \n            return;\n        }\n        \n        switch (keyCode) {\n        case PLAYER_UP:\n        case PLAYER_DOWN:\n            const movedPlayer = this.moveBoard(this.state.player, keyCode===PLAYER_UP); \n            if (movedPlayer) {\n                this.setState({player: movedPlayer})\n            }\n            break;\n        case PAUSE:\n            this.setState({pause: true})\n            break;\n        default:\n        }\n    }\n\n    render() {\n        const board = [...Array(ROW_SIZE * COL_SIZE)].map((_, pos) => {\n            let val = BACKGROUND;\n            if ((this.state.player.indexOf(pos) !== -1) || (this.state.opponent.indexOf(pos) !== -1)) {\n                val = PLAYER;\n            } else if (this.state.ball === pos) {\n                val = BALL;\n            }\n            return <Box key={pos} k={pos} name={val} />;\n        })\n\n        return (\n        <div style={outer}>\n            <h1> {\"[space]\"} {!this.state.pause? \"PLAY/pause\": \"play/PAUSE\"} </h1>\n            <div style={inner}>\n                <div style={style}>{board}</div>\n                <div style={score}>{this.state.playerScore} {this.state.opponentScore}</div>\n            </div>\n            <h3> {\"press UP and DOWN to move\"} </h3>\n\n        </div>\n        )\n    }\n}\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}